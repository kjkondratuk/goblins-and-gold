// Code generated by mockery v2.20.0. DO NOT EDIT.

package state

import mock "github.com/stretchr/testify/mock"

// MockApplier is an autogenerated mock type for the Applier type
type MockApplier[T AppliableType] struct {
	mock.Mock
}

type MockApplier_Expecter[T AppliableType] struct {
	mock *mock.Mock
}

func (_m *MockApplier[T]) EXPECT() *MockApplier_Expecter[T] {
	return &MockApplier_Expecter[T]{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: s, t
func (_m *MockApplier[T]) Apply(s State, t T) {
	_m.Called(s, t)
}

// MockApplier_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockApplier_Apply_Call[T AppliableType] struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - s State
//   - t T
func (_e *MockApplier_Expecter[T]) Apply(s interface{}, t interface{}) *MockApplier_Apply_Call[T] {
	return &MockApplier_Apply_Call[T]{Call: _e.mock.On("Apply", s, t)}
}

func (_c *MockApplier_Apply_Call[T]) Run(run func(s State, t T)) *MockApplier_Apply_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(State), args[1].(T))
	})
	return _c
}

func (_c *MockApplier_Apply_Call[T]) Return() *MockApplier_Apply_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockApplier_Apply_Call[T]) RunAndReturn(run func(State, T)) *MockApplier_Apply_Call[T] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockApplier interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApplier creates a new instance of MockApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApplier[T AppliableType](t mockConstructorTestingTNewMockApplier) *MockApplier[T] {
	mock := &MockApplier[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
