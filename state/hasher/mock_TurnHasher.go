// Code generated by mockery v2.34.2. DO NOT EDIT.

package hasher

import (
	actors "github.com/kjkondratuk/goblins-and-gold/actors"
	mock "github.com/stretchr/testify/mock"

	ring "container/ring"
)

// MockTurnHasher is an autogenerated mock type for the TurnHasher type
type MockTurnHasher struct {
	mock.Mock
}

type MockTurnHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTurnHasher) EXPECT() *MockTurnHasher_Expecter {
	return &MockTurnHasher_Expecter{mock: &_m.Mock}
}

// HashTurnOrder provides a mock function with given fields: pc
func (_m *MockTurnHasher) HashTurnOrder(pc ...actors.Combatant) (*ring.Ring, map[string]actors.Combatant) {
	_va := make([]interface{}, len(pc))
	for _i := range pc {
		_va[_i] = pc[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ring.Ring
	var r1 map[string]actors.Combatant
	if rf, ok := ret.Get(0).(func(...actors.Combatant) (*ring.Ring, map[string]actors.Combatant)); ok {
		return rf(pc...)
	}
	if rf, ok := ret.Get(0).(func(...actors.Combatant) *ring.Ring); ok {
		r0 = rf(pc...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ring.Ring)
		}
	}

	if rf, ok := ret.Get(1).(func(...actors.Combatant) map[string]actors.Combatant); ok {
		r1 = rf(pc...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]actors.Combatant)
		}
	}

	return r0, r1
}

// MockTurnHasher_HashTurnOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTurnOrder'
type MockTurnHasher_HashTurnOrder_Call struct {
	*mock.Call
}

// HashTurnOrder is a helper method to define mock.On call
//   - pc ...actors.Combatant
func (_e *MockTurnHasher_Expecter) HashTurnOrder(pc ...interface{}) *MockTurnHasher_HashTurnOrder_Call {
	return &MockTurnHasher_HashTurnOrder_Call{Call: _e.mock.On("HashTurnOrder",
		append([]interface{}{}, pc...)...)}
}

func (_c *MockTurnHasher_HashTurnOrder_Call) Run(run func(pc ...actors.Combatant)) *MockTurnHasher_HashTurnOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]actors.Combatant, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(actors.Combatant)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockTurnHasher_HashTurnOrder_Call) Return(_a0 *ring.Ring, _a1 map[string]actors.Combatant) *MockTurnHasher_HashTurnOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTurnHasher_HashTurnOrder_Call) RunAndReturn(run func(...actors.Combatant) (*ring.Ring, map[string]actors.Combatant)) *MockTurnHasher_HashTurnOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTurnHasher creates a new instance of MockTurnHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTurnHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTurnHasher {
	mock := &MockTurnHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
