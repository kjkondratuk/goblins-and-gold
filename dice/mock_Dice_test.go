// Code generated by mockery v2.34.2. DO NOT EDIT.

package dice

import mock "github.com/stretchr/testify/mock"

// MockDice is an autogenerated mock type for the Dice type
type MockDice struct {
	mock.Mock
}

type MockDice_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDice) EXPECT() *MockDice_Expecter {
	return &MockDice_Expecter{mock: &_m.Mock}
}

// Roll provides a mock function with given fields: rollExp
func (_m *MockDice) Roll(rollExp string) (int, bool) {
	ret := _m.Called(rollExp)

	var r0 int
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (int, bool)); ok {
		return rf(rollExp)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(rollExp)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(rollExp)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockDice_Roll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Roll'
type MockDice_Roll_Call struct {
	*mock.Call
}

// Roll is a helper method to define mock.On call
//   - rollExp string
func (_e *MockDice_Expecter) Roll(rollExp interface{}) *MockDice_Roll_Call {
	return &MockDice_Roll_Call{Call: _e.mock.On("Roll", rollExp)}
}

func (_c *MockDice_Roll_Call) Run(run func(rollExp string)) *MockDice_Roll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDice_Roll_Call) Return(_a0 int, _a1 bool) *MockDice_Roll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDice_Roll_Call) RunAndReturn(run func(string) (int, bool)) *MockDice_Roll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDice creates a new instance of MockDice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDice(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDice {
	mock := &MockDice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
