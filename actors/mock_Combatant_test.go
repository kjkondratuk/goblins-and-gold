// Code generated by mockery v2.34.2. DO NOT EDIT.

package actors

import (
	attack "github.com/kjkondratuk/goblins-and-gold/model/attack"
	item "github.com/kjkondratuk/goblins-and-gold/model/item"

	mock "github.com/stretchr/testify/mock"

	stats "github.com/kjkondratuk/goblins-and-gold/model/stats"
)

// MockCombatant is an autogenerated mock type for the Combatant type
type MockCombatant struct {
	mock.Mock
}

type MockCombatant_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCombatant) EXPECT() *MockCombatant_Expecter {
	return &MockCombatant_Expecter{mock: &_m.Mock}
}

// AC provides a mock function with given fields:
func (_m *MockCombatant) AC() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockCombatant_AC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AC'
type MockCombatant_AC_Call struct {
	*mock.Call
}

// AC is a helper method to define mock.On call
func (_e *MockCombatant_Expecter) AC() *MockCombatant_AC_Call {
	return &MockCombatant_AC_Call{Call: _e.mock.On("AC")}
}

func (_c *MockCombatant_AC_Call) Run(run func()) *MockCombatant_AC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCombatant_AC_Call) Return(_a0 int) *MockCombatant_AC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_AC_Call) RunAndReturn(run func() int) *MockCombatant_AC_Call {
	_c.Call.Return(run)
	return _c
}

// Attack provides a mock function with given fields: c, s
func (_m *MockCombatant) Attack(c Combatant, s AttackSelector) bool {
	ret := _m.Called(c, s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Combatant, AttackSelector) bool); ok {
		r0 = rf(c, s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCombatant_Attack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attack'
type MockCombatant_Attack_Call struct {
	*mock.Call
}

// Attack is a helper method to define mock.On call
//   - c Combatant
//   - s AttackSelector
func (_e *MockCombatant_Expecter) Attack(c interface{}, s interface{}) *MockCombatant_Attack_Call {
	return &MockCombatant_Attack_Call{Call: _e.mock.On("Attack", c, s)}
}

func (_c *MockCombatant_Attack_Call) Run(run func(c Combatant, s AttackSelector)) *MockCombatant_Attack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Combatant), args[1].(AttackSelector))
	})
	return _c
}

func (_c *MockCombatant_Attack_Call) Return(_a0 bool) *MockCombatant_Attack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Attack_Call) RunAndReturn(run func(Combatant, AttackSelector) bool) *MockCombatant_Attack_Call {
	_c.Call.Return(run)
	return _c
}

// Attacks provides a mock function with given fields:
func (_m *MockCombatant) Attacks() attack.AttackSet {
	ret := _m.Called()

	var r0 attack.AttackSet
	if rf, ok := ret.Get(0).(func() attack.AttackSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(attack.AttackSet)
		}
	}

	return r0
}

// MockCombatant_Attacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attacks'
type MockCombatant_Attacks_Call struct {
	*mock.Call
}

// Attacks is a helper method to define mock.On call
func (_e *MockCombatant_Expecter) Attacks() *MockCombatant_Attacks_Call {
	return &MockCombatant_Attacks_Call{Call: _e.mock.On("Attacks")}
}

func (_c *MockCombatant_Attacks_Call) Run(run func()) *MockCombatant_Attacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCombatant_Attacks_Call) Return(_a0 attack.AttackSet) *MockCombatant_Attacks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Attacks_Call) RunAndReturn(run func() attack.AttackSet) *MockCombatant_Attacks_Call {
	_c.Call.Return(run)
	return _c
}

// BaseStats provides a mock function with given fields:
func (_m *MockCombatant) BaseStats() stats.BaseStats {
	ret := _m.Called()

	var r0 stats.BaseStats
	if rf, ok := ret.Get(0).(func() stats.BaseStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(stats.BaseStats)
	}

	return r0
}

// MockCombatant_BaseStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseStats'
type MockCombatant_BaseStats_Call struct {
	*mock.Call
}

// BaseStats is a helper method to define mock.On call
func (_e *MockCombatant_Expecter) BaseStats() *MockCombatant_BaseStats_Call {
	return &MockCombatant_BaseStats_Call{Call: _e.mock.On("BaseStats")}
}

func (_c *MockCombatant_BaseStats_Call) Run(run func()) *MockCombatant_BaseStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCombatant_BaseStats_Call) Return(_a0 stats.BaseStats) *MockCombatant_BaseStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_BaseStats_Call) RunAndReturn(run func() stats.BaseStats) *MockCombatant_BaseStats_Call {
	_c.Call.Return(run)
	return _c
}

// Dmg provides a mock function with given fields: hp
func (_m *MockCombatant) Dmg(hp int) bool {
	ret := _m.Called(hp)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(hp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCombatant_Dmg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dmg'
type MockCombatant_Dmg_Call struct {
	*mock.Call
}

// Dmg is a helper method to define mock.On call
//   - hp int
func (_e *MockCombatant_Expecter) Dmg(hp interface{}) *MockCombatant_Dmg_Call {
	return &MockCombatant_Dmg_Call{Call: _e.mock.On("Dmg", hp)}
}

func (_c *MockCombatant_Dmg_Call) Run(run func(hp int)) *MockCombatant_Dmg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCombatant_Dmg_Call) Return(_a0 bool) *MockCombatant_Dmg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Dmg_Call) RunAndReturn(run func(int) bool) *MockCombatant_Dmg_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function with given fields:
func (_m *MockCombatant) Health() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockCombatant_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockCombatant_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
func (_e *MockCombatant_Expecter) Health() *MockCombatant_Health_Call {
	return &MockCombatant_Health_Call{Call: _e.mock.On("Health")}
}

func (_c *MockCombatant_Health_Call) Run(run func()) *MockCombatant_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCombatant_Health_Call) Return(_a0 int) *MockCombatant_Health_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Health_Call) RunAndReturn(run func() int) *MockCombatant_Health_Call {
	_c.Call.Return(run)
	return _c
}

// Inventory provides a mock function with given fields:
func (_m *MockCombatant) Inventory() []item.Item {
	ret := _m.Called()

	var r0 []item.Item
	if rf, ok := ret.Get(0).(func() []item.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]item.Item)
		}
	}

	return r0
}

// MockCombatant_Inventory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inventory'
type MockCombatant_Inventory_Call struct {
	*mock.Call
}

// Inventory is a helper method to define mock.On call
func (_e *MockCombatant_Expecter) Inventory() *MockCombatant_Inventory_Call {
	return &MockCombatant_Inventory_Call{Call: _e.mock.On("Inventory")}
}

func (_c *MockCombatant_Inventory_Call) Run(run func()) *MockCombatant_Inventory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCombatant_Inventory_Call) Return(_a0 []item.Item) *MockCombatant_Inventory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Inventory_Call) RunAndReturn(run func() []item.Item) *MockCombatant_Inventory_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockCombatant) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCombatant_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCombatant_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCombatant_Expecter) Name() *MockCombatant_Name_Call {
	return &MockCombatant_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCombatant_Name_Call) Run(run func()) *MockCombatant_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCombatant_Name_Call) Return(_a0 string) *MockCombatant_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Name_Call) RunAndReturn(run func() string) *MockCombatant_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Roll provides a mock function with given fields: rollExp
func (_m *MockCombatant) Roll(rollExp string) int {
	ret := _m.Called(rollExp)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(rollExp)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockCombatant_Roll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Roll'
type MockCombatant_Roll_Call struct {
	*mock.Call
}

// Roll is a helper method to define mock.On call
//   - rollExp string
func (_e *MockCombatant_Expecter) Roll(rollExp interface{}) *MockCombatant_Roll_Call {
	return &MockCombatant_Roll_Call{Call: _e.mock.On("Roll", rollExp)}
}

func (_c *MockCombatant_Roll_Call) Run(run func(rollExp string)) *MockCombatant_Roll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCombatant_Roll_Call) Return(_a0 int) *MockCombatant_Roll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Roll_Call) RunAndReturn(run func(string) int) *MockCombatant_Roll_Call {
	_c.Call.Return(run)
	return _c
}

// Unconscious provides a mock function with given fields:
func (_m *MockCombatant) Unconscious() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCombatant_Unconscious_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unconscious'
type MockCombatant_Unconscious_Call struct {
	*mock.Call
}

// Unconscious is a helper method to define mock.On call
func (_e *MockCombatant_Expecter) Unconscious() *MockCombatant_Unconscious_Call {
	return &MockCombatant_Unconscious_Call{Call: _e.mock.On("Unconscious")}
}

func (_c *MockCombatant_Unconscious_Call) Run(run func()) *MockCombatant_Unconscious_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCombatant_Unconscious_Call) Return(_a0 bool) *MockCombatant_Unconscious_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCombatant_Unconscious_Call) RunAndReturn(run func() bool) *MockCombatant_Unconscious_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCombatant creates a new instance of MockCombatant. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCombatant(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCombatant {
	mock := &MockCombatant{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
