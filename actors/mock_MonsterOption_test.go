// Code generated by mockery v2.34.2. DO NOT EDIT.

package actors

import mock "github.com/stretchr/testify/mock"

// MockMonsterOption is an autogenerated mock type for the MonsterOption type
type MockMonsterOption struct {
	mock.Mock
}

type MockMonsterOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonsterOption) EXPECT() *MockMonsterOption_Expecter {
	return &MockMonsterOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *MockMonsterOption) Execute(c *monster) {
	_m.Called(c)
}

// MockMonsterOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockMonsterOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c *monster
func (_e *MockMonsterOption_Expecter) Execute(c interface{}) *MockMonsterOption_Execute_Call {
	return &MockMonsterOption_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *MockMonsterOption_Execute_Call) Run(run func(c *monster)) *MockMonsterOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*monster))
	})
	return _c
}

func (_c *MockMonsterOption_Execute_Call) Return() *MockMonsterOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMonsterOption_Execute_Call) RunAndReturn(run func(*monster)) *MockMonsterOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMonsterOption creates a new instance of MockMonsterOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMonsterOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMonsterOption {
	mock := &MockMonsterOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
