// Code generated by mockery v2.34.2. DO NOT EDIT.

package actors

import (
	attack "github.com/kjkondratuk/goblins-and-gold/model/attack"
	item "github.com/kjkondratuk/goblins-and-gold/model/item"

	mock "github.com/stretchr/testify/mock"

	stats "github.com/kjkondratuk/goblins-and-gold/model/stats"
)

// MockMonster is an autogenerated mock type for the Monster type
type MockMonster struct {
	mock.Mock
}

type MockMonster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonster) EXPECT() *MockMonster_Expecter {
	return &MockMonster_Expecter{mock: &_m.Mock}
}

// AC provides a mock function with given fields:
func (_m *MockMonster) AC() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockMonster_AC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AC'
type MockMonster_AC_Call struct {
	*mock.Call
}

// AC is a helper method to define mock.On call
func (_e *MockMonster_Expecter) AC() *MockMonster_AC_Call {
	return &MockMonster_AC_Call{Call: _e.mock.On("AC")}
}

func (_c *MockMonster_AC_Call) Run(run func()) *MockMonster_AC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_AC_Call) Return(_a0 int) *MockMonster_AC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_AC_Call) RunAndReturn(run func() int) *MockMonster_AC_Call {
	_c.Call.Return(run)
	return _c
}

// Attack provides a mock function with given fields: c, s
func (_m *MockMonster) Attack(c Combatant, s AttackSelector) bool {
	ret := _m.Called(c, s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Combatant, AttackSelector) bool); ok {
		r0 = rf(c, s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMonster_Attack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attack'
type MockMonster_Attack_Call struct {
	*mock.Call
}

// Attack is a helper method to define mock.On call
//   - c Combatant
//   - s AttackSelector
func (_e *MockMonster_Expecter) Attack(c interface{}, s interface{}) *MockMonster_Attack_Call {
	return &MockMonster_Attack_Call{Call: _e.mock.On("Attack", c, s)}
}

func (_c *MockMonster_Attack_Call) Run(run func(c Combatant, s AttackSelector)) *MockMonster_Attack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Combatant), args[1].(AttackSelector))
	})
	return _c
}

func (_c *MockMonster_Attack_Call) Return(_a0 bool) *MockMonster_Attack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Attack_Call) RunAndReturn(run func(Combatant, AttackSelector) bool) *MockMonster_Attack_Call {
	_c.Call.Return(run)
	return _c
}

// Attacks provides a mock function with given fields:
func (_m *MockMonster) Attacks() attack.AttackSet {
	ret := _m.Called()

	var r0 attack.AttackSet
	if rf, ok := ret.Get(0).(func() attack.AttackSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(attack.AttackSet)
		}
	}

	return r0
}

// MockMonster_Attacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attacks'
type MockMonster_Attacks_Call struct {
	*mock.Call
}

// Attacks is a helper method to define mock.On call
func (_e *MockMonster_Expecter) Attacks() *MockMonster_Attacks_Call {
	return &MockMonster_Attacks_Call{Call: _e.mock.On("Attacks")}
}

func (_c *MockMonster_Attacks_Call) Run(run func()) *MockMonster_Attacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_Attacks_Call) Return(_a0 attack.AttackSet) *MockMonster_Attacks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Attacks_Call) RunAndReturn(run func() attack.AttackSet) *MockMonster_Attacks_Call {
	_c.Call.Return(run)
	return _c
}

// BaseStats provides a mock function with given fields:
func (_m *MockMonster) BaseStats() stats.BaseStats {
	ret := _m.Called()

	var r0 stats.BaseStats
	if rf, ok := ret.Get(0).(func() stats.BaseStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(stats.BaseStats)
	}

	return r0
}

// MockMonster_BaseStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseStats'
type MockMonster_BaseStats_Call struct {
	*mock.Call
}

// BaseStats is a helper method to define mock.On call
func (_e *MockMonster_Expecter) BaseStats() *MockMonster_BaseStats_Call {
	return &MockMonster_BaseStats_Call{Call: _e.mock.On("BaseStats")}
}

func (_c *MockMonster_BaseStats_Call) Run(run func()) *MockMonster_BaseStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_BaseStats_Call) Return(_a0 stats.BaseStats) *MockMonster_BaseStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_BaseStats_Call) RunAndReturn(run func() stats.BaseStats) *MockMonster_BaseStats_Call {
	_c.Call.Return(run)
	return _c
}

// Describe provides a mock function with given fields:
func (_m *MockMonster) Describe() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMonster_Describe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Describe'
type MockMonster_Describe_Call struct {
	*mock.Call
}

// Describe is a helper method to define mock.On call
func (_e *MockMonster_Expecter) Describe() *MockMonster_Describe_Call {
	return &MockMonster_Describe_Call{Call: _e.mock.On("Describe")}
}

func (_c *MockMonster_Describe_Call) Run(run func()) *MockMonster_Describe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_Describe_Call) Return(_a0 string) *MockMonster_Describe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Describe_Call) RunAndReturn(run func() string) *MockMonster_Describe_Call {
	_c.Call.Return(run)
	return _c
}

// Dmg provides a mock function with given fields: hp
func (_m *MockMonster) Dmg(hp int) bool {
	ret := _m.Called(hp)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(hp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMonster_Dmg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dmg'
type MockMonster_Dmg_Call struct {
	*mock.Call
}

// Dmg is a helper method to define mock.On call
//   - hp int
func (_e *MockMonster_Expecter) Dmg(hp interface{}) *MockMonster_Dmg_Call {
	return &MockMonster_Dmg_Call{Call: _e.mock.On("Dmg", hp)}
}

func (_c *MockMonster_Dmg_Call) Run(run func(hp int)) *MockMonster_Dmg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockMonster_Dmg_Call) Return(_a0 bool) *MockMonster_Dmg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Dmg_Call) RunAndReturn(run func(int) bool) *MockMonster_Dmg_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function with given fields:
func (_m *MockMonster) Health() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockMonster_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockMonster_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
func (_e *MockMonster_Expecter) Health() *MockMonster_Health_Call {
	return &MockMonster_Health_Call{Call: _e.mock.On("Health")}
}

func (_c *MockMonster_Health_Call) Run(run func()) *MockMonster_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_Health_Call) Return(_a0 int) *MockMonster_Health_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Health_Call) RunAndReturn(run func() int) *MockMonster_Health_Call {
	_c.Call.Return(run)
	return _c
}

// Inventory provides a mock function with given fields:
func (_m *MockMonster) Inventory() []item.Item {
	ret := _m.Called()

	var r0 []item.Item
	if rf, ok := ret.Get(0).(func() []item.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]item.Item)
		}
	}

	return r0
}

// MockMonster_Inventory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inventory'
type MockMonster_Inventory_Call struct {
	*mock.Call
}

// Inventory is a helper method to define mock.On call
func (_e *MockMonster_Expecter) Inventory() *MockMonster_Inventory_Call {
	return &MockMonster_Inventory_Call{Call: _e.mock.On("Inventory")}
}

func (_c *MockMonster_Inventory_Call) Run(run func()) *MockMonster_Inventory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_Inventory_Call) Return(_a0 []item.Item) *MockMonster_Inventory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Inventory_Call) RunAndReturn(run func() []item.Item) *MockMonster_Inventory_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockMonster) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMonster_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockMonster_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockMonster_Expecter) Name() *MockMonster_Name_Call {
	return &MockMonster_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockMonster_Name_Call) Run(run func()) *MockMonster_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_Name_Call) Return(_a0 string) *MockMonster_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Name_Call) RunAndReturn(run func() string) *MockMonster_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Roll provides a mock function with given fields: rollExp
func (_m *MockMonster) Roll(rollExp string) int {
	ret := _m.Called(rollExp)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(rollExp)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockMonster_Roll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Roll'
type MockMonster_Roll_Call struct {
	*mock.Call
}

// Roll is a helper method to define mock.On call
//   - rollExp string
func (_e *MockMonster_Expecter) Roll(rollExp interface{}) *MockMonster_Roll_Call {
	return &MockMonster_Roll_Call{Call: _e.mock.On("Roll", rollExp)}
}

func (_c *MockMonster_Roll_Call) Run(run func(rollExp string)) *MockMonster_Roll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMonster_Roll_Call) Return(_a0 int) *MockMonster_Roll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Roll_Call) RunAndReturn(run func(string) int) *MockMonster_Roll_Call {
	_c.Call.Return(run)
	return _c
}

// Unconscious provides a mock function with given fields:
func (_m *MockMonster) Unconscious() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMonster_Unconscious_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unconscious'
type MockMonster_Unconscious_Call struct {
	*mock.Call
}

// Unconscious is a helper method to define mock.On call
func (_e *MockMonster_Expecter) Unconscious() *MockMonster_Unconscious_Call {
	return &MockMonster_Unconscious_Call{Call: _e.mock.On("Unconscious")}
}

func (_c *MockMonster_Unconscious_Call) Run(run func()) *MockMonster_Unconscious_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMonster_Unconscious_Call) Return(_a0 bool) *MockMonster_Unconscious_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMonster_Unconscious_Call) RunAndReturn(run func() bool) *MockMonster_Unconscious_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMonster creates a new instance of MockMonster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMonster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMonster {
	mock := &MockMonster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
