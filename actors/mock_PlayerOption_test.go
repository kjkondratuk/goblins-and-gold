// Code generated by mockery v2.34.2. DO NOT EDIT.

package actors

import mock "github.com/stretchr/testify/mock"

// MockPlayerOption is an autogenerated mock type for the PlayerOption type
type MockPlayerOption struct {
	mock.Mock
}

type MockPlayerOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerOption) EXPECT() *MockPlayerOption_Expecter {
	return &MockPlayerOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *MockPlayerOption) Execute(c *player) {
	_m.Called(c)
}

// MockPlayerOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockPlayerOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c *player
func (_e *MockPlayerOption_Expecter) Execute(c interface{}) *MockPlayerOption_Execute_Call {
	return &MockPlayerOption_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *MockPlayerOption_Execute_Call) Run(run func(c *player)) *MockPlayerOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*player))
	})
	return _c
}

func (_c *MockPlayerOption_Execute_Call) Return() *MockPlayerOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPlayerOption_Execute_Call) RunAndReturn(run func(*player)) *MockPlayerOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlayerOption creates a new instance of MockPlayerOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerOption {
	mock := &MockPlayerOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
