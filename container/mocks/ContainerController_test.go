// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	interaction "github.com/kjkondratuk/goblins-and-gold/interaction"
	mock "github.com/stretchr/testify/mock"

	state "github.com/kjkondratuk/goblins-and-gold/state"
)

// ContainerController is an autogenerated mock type for the ContainerController type
type ContainerController struct {
	mock.Mock
}

type ContainerController_Expecter struct {
	mock *mock.Mock
}

func (_m *ContainerController) EXPECT() *ContainerController_Expecter {
	return &ContainerController_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: s, c, t
func (_m *ContainerController) Do(s state.State, c state.Container, t interaction.Type) (interaction.Result, error) {
	ret := _m.Called(s, c, t)

	var r0 interaction.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(state.State, state.Container, interaction.Type) (interaction.Result, error)); ok {
		return rf(s, c, t)
	}
	if rf, ok := ret.Get(0).(func(state.State, state.Container, interaction.Type) interaction.Result); ok {
		r0 = rf(s, c, t)
	} else {
		r0 = ret.Get(0).(interaction.Result)
	}

	if rf, ok := ret.Get(1).(func(state.State, state.Container, interaction.Type) error); ok {
		r1 = rf(s, c, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerController_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type ContainerController_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - s state.State
//   - c state.Container
//   - t interaction.Type
func (_e *ContainerController_Expecter) Do(s interface{}, c interface{}, t interface{}) *ContainerController_Do_Call {
	return &ContainerController_Do_Call{Call: _e.mock.On("Do", s, c, t)}
}

func (_c *ContainerController_Do_Call) Run(run func(s state.State, c state.Container, t interaction.Type)) *ContainerController_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.State), args[1].(state.Container), args[2].(interaction.Type))
	})
	return _c
}

func (_c *ContainerController_Do_Call) Return(_a0 interaction.Result, _a1 error) *ContainerController_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerController_Do_Call) RunAndReturn(run func(state.State, state.Container, interaction.Type) (interaction.Result, error)) *ContainerController_Do_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewContainerController interface {
	mock.TestingT
	Cleanup(func())
}

// NewContainerController creates a new instance of ContainerController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContainerController(t mockConstructorTestingTNewContainerController) *ContainerController {
	mock := &ContainerController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
