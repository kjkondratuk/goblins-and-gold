// Code generated by mockery v2.34.2. DO NOT EDIT.

package encounter

import (
	actors "github.com/kjkondratuk/goblins-and-gold/actors"
	mock "github.com/stretchr/testify/mock"
)

// MockEncounter is an autogenerated mock type for the Encounter type
type MockEncounter struct {
	mock.Mock
}

type MockEncounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncounter) EXPECT() *MockEncounter_Expecter {
	return &MockEncounter_Expecter{mock: &_m.Mock}
}

// Describe provides a mock function with given fields:
func (_m *MockEncounter) Describe() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEncounter_Describe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Describe'
type MockEncounter_Describe_Call struct {
	*mock.Call
}

// Describe is a helper method to define mock.On call
func (_e *MockEncounter_Expecter) Describe() *MockEncounter_Describe_Call {
	return &MockEncounter_Describe_Call{Call: _e.mock.On("Describe")}
}

func (_c *MockEncounter_Describe_Call) Run(run func()) *MockEncounter_Describe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncounter_Describe_Call) Return(_a0 string) *MockEncounter_Describe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncounter_Describe_Call) RunAndReturn(run func() string) *MockEncounter_Describe_Call {
	_c.Call.Return(run)
	return _c
}

// Enemies provides a mock function with given fields:
func (_m *MockEncounter) Enemies() []actors.Monster {
	ret := _m.Called()

	var r0 []actors.Monster
	if rf, ok := ret.Get(0).(func() []actors.Monster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]actors.Monster)
		}
	}

	return r0
}

// MockEncounter_Enemies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enemies'
type MockEncounter_Enemies_Call struct {
	*mock.Call
}

// Enemies is a helper method to define mock.On call
func (_e *MockEncounter_Expecter) Enemies() *MockEncounter_Enemies_Call {
	return &MockEncounter_Enemies_Call{Call: _e.mock.On("Enemies")}
}

func (_c *MockEncounter_Enemies_Call) Run(run func()) *MockEncounter_Enemies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncounter_Enemies_Call) Return(_a0 []actors.Monster) *MockEncounter_Enemies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncounter_Enemies_Call) RunAndReturn(run func() []actors.Monster) *MockEncounter_Enemies_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncounter creates a new instance of MockEncounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncounter {
	mock := &MockEncounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
