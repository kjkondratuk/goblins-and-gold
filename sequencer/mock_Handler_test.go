// Code generated by mockery v2.34.2. DO NOT EDIT.

package sequencer

import (
	actors "github.com/kjkondratuk/goblins-and-gold/actors"
	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: c
func (_m *MockHandler) Execute(c actors.Combatant) {
	_m.Called(c)
}

// MockHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - c actors.Combatant
func (_e *MockHandler_Expecter) Execute(c interface{}) *MockHandler_Execute_Call {
	return &MockHandler_Execute_Call{Call: _e.mock.On("Execute", c)}
}

func (_c *MockHandler_Execute_Call) Run(run func(c actors.Combatant)) *MockHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(actors.Combatant))
	})
	return _c
}

func (_c *MockHandler_Execute_Call) Return() *MockHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Execute_Call) RunAndReturn(run func(actors.Combatant)) *MockHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
